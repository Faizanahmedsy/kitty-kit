{
  "content": "import UILoader from \"@/components/custom/loaders/UILoader\";\nimport { DynamicTable } from \"@/components/custom/tanstack-table/tanstack-tablev2\";\nimport { use{moduleName}List } from \"@/services/management/{moduleName.toLowerCase()}/{moduleName.toLowerCase()}.hook\";\nimport { QueryParams } from \"@/services/types/params\";\nimport React from \"react\";\nimport { {moduleName.toLowerCase()}Columns } from \"./columns\";\n\nexport default function {moduleName}ListTable() {\n  const [pageQuery, setPageQuery] = React.useState<QueryParams>({\n    page: 1,\n    limit: 10,\n  });\n\n  const [selectedCity, setSelectedCity] = React.useState<string>();\n  const [selectedState, setSelectedState] = React.useState<string>();\n\n  const {moduleName.toLowerCase()}ListQuery = use{moduleName}List({\n    ...pageQuery,\n    city_id: selectedCity || undefined,\n    state_id: selectedState || undefined,\n  });\n\n  // Handle pagination change\n  const handlePaginationChange = (pageIndex: number, pageSize: number) => {\n    setPageQuery((prev) => ({\n      ...prev,\n      page: pageIndex + 1,\n      limit: pageSize,\n    }));\n  };\n\n  // Handle city filter change\n  const handleCitySelectChange = (value: string) => {\n    setSelectedCity(value);\n    setPageQuery((prev) => ({\n      ...prev,\n      page: 1, // Reset to the first page when filter changes\n    }));\n  };\n\n  // Handle state filter change\n  const handleStateSelectChange = (value: string) => {\n    setSelectedState(value);\n    setPageQuery((prev) => ({\n      ...prev,\n      page: 1, // Reset to the first page when filter changes\n    }));\n  };\n\n  return (\n    <div>\n      {{moduleName.toLowerCase()}ListQuery.isLoading && <UILoader />}\n      {{moduleName.toLowerCase()}ListQuery.isSuccess && (\n        <DynamicTable\n          data={{moduleName.toLowerCase()}ListQuery.data?.list || []}\n          columns={{moduleName.toLowerCase()}Columns}\n          totalCount={{moduleName.toLowerCase()}ListQuery.data?.totalCount || 0}\n          pageSize={pageQuery.limit}\n          pageIndex={(pageQuery.page ?? 1) - 1}\n          onPaginationChange={handlePaginationChange}\n          selectFilters=[\n            {\n              key: \"city\",\n              placeholder: \"Filter by City\",\n              options: [\n                { label: \"New York\", value: \"1\" },\n                { label: \"San Francisco\", value: \"2\" },\n              ],\n              onSelectChange: handleCitySelectChange,\n            },\n            {\n              key: \"state\",\n              placeholder: \"Filter by State\",\n              options: [\n                { label: \"California\", value: \"1\" },\n                { label: \"New York\", value: \"2\" },\n              ],\n              onSelectChange: handleStateSelectChange,\n            },\n          ]\n        />\n      )}\n    </div>\n  );\n}\n"
}
